CREATE TABLE IF NOT EXISTS [Student] (
	[studentId]	INTEGER,
	[firstName]	TEXT,
	[lastName]	TEXT,
	PRIMARY KEY([studentId][])
);

CREATE TABLE IF NOT EXISTS [Section] (
	[sectionId]	INTEGER,
	[courseName]	TEXT,
	[courseCode]	TEXT,
	[meetingTime]	TEXT,
	PRIMARY KEY([sectionId])
);

CREATE TABLE IF NOT EXISTS [StudentEnrollsInSection] (
	[studentId]	INTEGER,
	[sectionId]	INTEGER,
	[seatNumber]	INTEGER,
	FOREIGN KEY([studentId]) REFERENCES [Student]([studentId]),
	FOREIGN KEY([sectionId]) REFERENCES [Section]([sectionId]),
	PRIMARY KEY([studentId],[sectionId])
);

CREATE TABLE IF NOT EXISTS [AttandanceRecording] (
	[recordingId]	INTEGER,
	[date]	TEXT,
	[status]	TEXT,
	[studentId]	INTEGER,
	[sectionId]	INTEGER,
	FOREIGN KEY([studentId]) REFERENCES [Student]([studentId]),
	FOREIGN KEY([sectionId]) REFERENCES [Section]([sectionId]),
	PRIMARY KEY([recordingId])
);

WITH studentId as (
    SELECT studentId FROM Student
    WHERE firstName = ?
    AND lastName = ?
),
sectionId as (
    SELECT sectionId FROM Section
    WHERE courseCode = ?
)

INSERT INTO [StudentEnrollsInSection] ([studentId], [sectionId], [seatNumber]) 
SELECT studentId, sectionId, 1
FROM studentId, sectionId;

WITH studentId as (
    SELECT studentId FROM Student
    WHERE firstName = ?
    AND lastName = ?
),
sectionId as (
    SELECT sectionId FROM Section
    WHERE courseCode = ?
)

INSERT INTO [AttendanceRecording] ([date], [status], [studentId], [sectionId]) 
SELECT ?, ?, studentId, sectionId
FROM studentId, sectionId;

SELECT * FROM studentId, sectionId;

INSERT INTO [Student] ([studentId], [firstName], [lastName]) VALUES (?, ?, ?)

g++ -o main ../agileProjectTemplate2025/code/*.cpp sqlite3.o -pthread -ldl